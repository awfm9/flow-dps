// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package dps

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetFirstRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetFirstRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetFirstRequestValidationError is the validation error returned by
// GetFirstRequest.Validate if the designated constraints aren't met.
type GetFirstRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFirstRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFirstRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFirstRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFirstRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFirstRequestValidationError) ErrorName() string { return "GetFirstRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFirstRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFirstRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFirstRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFirstRequestValidationError{}

// Validate checks the field values on GetFirstResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetFirstResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// GetFirstResponseValidationError is the validation error returned by
// GetFirstResponse.Validate if the designated constraints aren't met.
type GetFirstResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFirstResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFirstResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFirstResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFirstResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFirstResponseValidationError) ErrorName() string { return "GetFirstResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFirstResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFirstResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFirstResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFirstResponseValidationError{}

// Validate checks the field values on GetLastRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetLastRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLastRequestValidationError is the validation error returned by
// GetLastRequest.Validate if the designated constraints aren't met.
type GetLastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastRequestValidationError) ErrorName() string { return "GetLastRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastRequestValidationError{}

// Validate checks the field values on GetLastResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetLastResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// GetLastResponseValidationError is the validation error returned by
// GetLastResponse.Validate if the designated constraints aren't met.
type GetLastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastResponseValidationError) ErrorName() string { return "GetLastResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastResponseValidationError{}

// Validate checks the field values on GetHeightForBlockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHeightForBlockRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetBlockID()) != 32 {
		return GetHeightForBlockRequestValidationError{
			field:  "BlockID",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// GetHeightForBlockRequestValidationError is the validation error returned by
// GetHeightForBlockRequest.Validate if the designated constraints aren't met.
type GetHeightForBlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHeightForBlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHeightForBlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHeightForBlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHeightForBlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHeightForBlockRequestValidationError) ErrorName() string {
	return "GetHeightForBlockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHeightForBlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHeightForBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHeightForBlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHeightForBlockRequestValidationError{}

// Validate checks the field values on GetHeightForBlockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHeightForBlockResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BlockID

	// no validation rules for Height

	return nil
}

// GetHeightForBlockResponseValidationError is the validation error returned by
// GetHeightForBlockResponse.Validate if the designated constraints aren't met.
type GetHeightForBlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHeightForBlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHeightForBlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHeightForBlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHeightForBlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHeightForBlockResponseValidationError) ErrorName() string {
	return "GetHeightForBlockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHeightForBlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHeightForBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHeightForBlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHeightForBlockResponseValidationError{}

// Validate checks the field values on GetCommitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCommitRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// GetCommitRequestValidationError is the validation error returned by
// GetCommitRequest.Validate if the designated constraints aren't met.
type GetCommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommitRequestValidationError) ErrorName() string { return "GetCommitRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommitRequestValidationError{}

// Validate checks the field values on GetCommitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCommitResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	// no validation rules for Commit

	return nil
}

// GetCommitResponseValidationError is the validation error returned by
// GetCommitResponse.Validate if the designated constraints aren't met.
type GetCommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommitResponseValidationError) ErrorName() string {
	return "GetCommitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommitResponseValidationError{}

// Validate checks the field values on GetHeaderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetHeaderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// GetHeaderRequestValidationError is the validation error returned by
// GetHeaderRequest.Validate if the designated constraints aren't met.
type GetHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHeaderRequestValidationError) ErrorName() string { return "GetHeaderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHeaderRequestValidationError{}

// Validate checks the field values on GetHeaderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetHeaderResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	// no validation rules for Data

	return nil
}

// GetHeaderResponseValidationError is the validation error returned by
// GetHeaderResponse.Validate if the designated constraints aren't met.
type GetHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHeaderResponseValidationError) ErrorName() string {
	return "GetHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHeaderResponseValidationError{}

// Validate checks the field values on GetEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// GetEventsRequestValidationError is the validation error returned by
// GetEventsRequest.Validate if the designated constraints aren't met.
type GetEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsRequestValidationError) ErrorName() string { return "GetEventsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsRequestValidationError{}

// Validate checks the field values on GetEventsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	// no validation rules for Data

	return nil
}

// GetEventsResponseValidationError is the validation error returned by
// GetEventsResponse.Validate if the designated constraints aren't met.
type GetEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsResponseValidationError) ErrorName() string {
	return "GetEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsResponseValidationError{}

// Validate checks the field values on GetRegisterValuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRegisterValuesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if len(item) != 32 {
			return GetRegisterValuesRequestValidationError{
				field:  fmt.Sprintf("Paths[%v]", idx),
				reason: "value length must be 32 bytes",
			}
		}

	}

	return nil
}

// GetRegisterValuesRequestValidationError is the validation error returned by
// GetRegisterValuesRequest.Validate if the designated constraints aren't met.
type GetRegisterValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegisterValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegisterValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegisterValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegisterValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegisterValuesRequestValidationError) ErrorName() string {
	return "GetRegisterValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegisterValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegisterValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegisterValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegisterValuesRequestValidationError{}

// Validate checks the field values on GetRegisterValuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRegisterValuesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// GetRegisterValuesResponseValidationError is the validation error returned by
// GetRegisterValuesResponse.Validate if the designated constraints aren't met.
type GetRegisterValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegisterValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegisterValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegisterValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegisterValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegisterValuesResponseValidationError) ErrorName() string {
	return "GetRegisterValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegisterValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegisterValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegisterValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegisterValuesResponseValidationError{}

// Validate checks the field values on GetCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCollectionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetCollectionID()) != 32 {
		return GetCollectionRequestValidationError{
			field:  "CollectionID",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// GetCollectionRequestValidationError is the validation error returned by
// GetCollectionRequest.Validate if the designated constraints aren't met.
type GetCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionRequestValidationError) ErrorName() string {
	return "GetCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionRequestValidationError{}

// Validate checks the field values on GetCollectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCollectionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CollectionID

	// no validation rules for Data

	return nil
}

// GetCollectionResponseValidationError is the validation error returned by
// GetCollectionResponse.Validate if the designated constraints aren't met.
type GetCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionResponseValidationError) ErrorName() string {
	return "GetCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionResponseValidationError{}

// Validate checks the field values on ListCollectionsForHeightRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCollectionsForHeightRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// ListCollectionsForHeightRequestValidationError is the validation error
// returned by ListCollectionsForHeightRequest.Validate if the designated
// constraints aren't met.
type ListCollectionsForHeightRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionsForHeightRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionsForHeightRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionsForHeightRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionsForHeightRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionsForHeightRequestValidationError) ErrorName() string {
	return "ListCollectionsForHeightRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionsForHeightRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionsForHeightRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionsForHeightRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionsForHeightRequestValidationError{}

// Validate checks the field values on ListCollectionsForHeightResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListCollectionsForHeightResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// ListCollectionsForHeightResponseValidationError is the validation error
// returned by ListCollectionsForHeightResponse.Validate if the designated
// constraints aren't met.
type ListCollectionsForHeightResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionsForHeightResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionsForHeightResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionsForHeightResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionsForHeightResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionsForHeightResponseValidationError) ErrorName() string {
	return "ListCollectionsForHeightResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionsForHeightResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionsForHeightResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionsForHeightResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionsForHeightResponseValidationError{}

// Validate checks the field values on GetGuaranteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuaranteeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetCollectionID()) != 32 {
		return GetGuaranteeRequestValidationError{
			field:  "CollectionID",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// GetGuaranteeRequestValidationError is the validation error returned by
// GetGuaranteeRequest.Validate if the designated constraints aren't met.
type GetGuaranteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuaranteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuaranteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuaranteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuaranteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuaranteeRequestValidationError) ErrorName() string {
	return "GetGuaranteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuaranteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuaranteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuaranteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuaranteeRequestValidationError{}

// Validate checks the field values on GetGuaranteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuaranteeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CollectionID

	// no validation rules for Data

	return nil
}

// GetGuaranteeResponseValidationError is the validation error returned by
// GetGuaranteeResponse.Validate if the designated constraints aren't met.
type GetGuaranteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuaranteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuaranteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuaranteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuaranteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuaranteeResponseValidationError) ErrorName() string {
	return "GetGuaranteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuaranteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuaranteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuaranteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuaranteeResponseValidationError{}

// Validate checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTransactionID()) != 32 {
		return GetTransactionRequestValidationError{
			field:  "TransactionID",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// GetTransactionRequestValidationError is the validation error returned by
// GetTransactionRequest.Validate if the designated constraints aren't met.
type GetTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionRequestValidationError) ErrorName() string {
	return "GetTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionRequestValidationError{}

// Validate checks the field values on GetTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TransactionID

	// no validation rules for Data

	return nil
}

// GetTransactionResponseValidationError is the validation error returned by
// GetTransactionResponse.Validate if the designated constraints aren't met.
type GetTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionResponseValidationError) ErrorName() string {
	return "GetTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionResponseValidationError{}

// Validate checks the field values on GetHeightForTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHeightForTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTransactionID()) != 32 {
		return GetHeightForTransactionRequestValidationError{
			field:  "TransactionID",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// GetHeightForTransactionRequestValidationError is the validation error
// returned by GetHeightForTransactionRequest.Validate if the designated
// constraints aren't met.
type GetHeightForTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHeightForTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHeightForTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHeightForTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHeightForTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHeightForTransactionRequestValidationError) ErrorName() string {
	return "GetHeightForTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHeightForTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHeightForTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHeightForTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHeightForTransactionRequestValidationError{}

// Validate checks the field values on GetHeightForTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHeightForTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TransactionID

	// no validation rules for Height

	return nil
}

// GetHeightForTransactionResponseValidationError is the validation error
// returned by GetHeightForTransactionResponse.Validate if the designated
// constraints aren't met.
type GetHeightForTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHeightForTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHeightForTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHeightForTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHeightForTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHeightForTransactionResponseValidationError) ErrorName() string {
	return "GetHeightForTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHeightForTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHeightForTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHeightForTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHeightForTransactionResponseValidationError{}

// Validate checks the field values on ListTransactionsForHeightRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListTransactionsForHeightRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// ListTransactionsForHeightRequestValidationError is the validation error
// returned by ListTransactionsForHeightRequest.Validate if the designated
// constraints aren't met.
type ListTransactionsForHeightRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsForHeightRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsForHeightRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsForHeightRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsForHeightRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsForHeightRequestValidationError) ErrorName() string {
	return "ListTransactionsForHeightRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsForHeightRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsForHeightRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsForHeightRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsForHeightRequestValidationError{}

// Validate checks the field values on ListTransactionsForHeightResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListTransactionsForHeightResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// ListTransactionsForHeightResponseValidationError is the validation error
// returned by ListTransactionsForHeightResponse.Validate if the designated
// constraints aren't met.
type ListTransactionsForHeightResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsForHeightResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsForHeightResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsForHeightResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsForHeightResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsForHeightResponseValidationError) ErrorName() string {
	return "ListTransactionsForHeightResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsForHeightResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsForHeightResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsForHeightResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsForHeightResponseValidationError{}

// Validate checks the field values on GetResultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetResultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTransactionID()) != 32 {
		return GetResultRequestValidationError{
			field:  "TransactionID",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// GetResultRequestValidationError is the validation error returned by
// GetResultRequest.Validate if the designated constraints aren't met.
type GetResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResultRequestValidationError) ErrorName() string { return "GetResultRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResultRequestValidationError{}

// Validate checks the field values on GetResultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetResultResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TransactionID

	// no validation rules for Data

	return nil
}

// GetResultResponseValidationError is the validation error returned by
// GetResultResponse.Validate if the designated constraints aren't met.
type GetResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResultResponseValidationError) ErrorName() string {
	return "GetResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResultResponseValidationError{}

// Validate checks the field values on GetSealRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetSealRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSealID()) != 32 {
		return GetSealRequestValidationError{
			field:  "SealID",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// GetSealRequestValidationError is the validation error returned by
// GetSealRequest.Validate if the designated constraints aren't met.
type GetSealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSealRequestValidationError) ErrorName() string { return "GetSealRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSealRequestValidationError{}

// Validate checks the field values on GetSealResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetSealResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SealID

	// no validation rules for Data

	return nil
}

// GetSealResponseValidationError is the validation error returned by
// GetSealResponse.Validate if the designated constraints aren't met.
type GetSealResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSealResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSealResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSealResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSealResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSealResponseValidationError) ErrorName() string { return "GetSealResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSealResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSealResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSealResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSealResponseValidationError{}

// Validate checks the field values on ListSealsForHeightRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSealsForHeightRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// ListSealsForHeightRequestValidationError is the validation error returned by
// ListSealsForHeightRequest.Validate if the designated constraints aren't met.
type ListSealsForHeightRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSealsForHeightRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSealsForHeightRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSealsForHeightRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSealsForHeightRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSealsForHeightRequestValidationError) ErrorName() string {
	return "ListSealsForHeightRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSealsForHeightRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSealsForHeightRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSealsForHeightRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSealsForHeightRequestValidationError{}

// Validate checks the field values on ListSealsForHeightResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSealsForHeightResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Height

	return nil
}

// ListSealsForHeightResponseValidationError is the validation error returned
// by ListSealsForHeightResponse.Validate if the designated constraints aren't met.
type ListSealsForHeightResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSealsForHeightResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSealsForHeightResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSealsForHeightResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSealsForHeightResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSealsForHeightResponseValidationError) ErrorName() string {
	return "ListSealsForHeightResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSealsForHeightResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSealsForHeightResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSealsForHeightResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSealsForHeightResponseValidationError{}
